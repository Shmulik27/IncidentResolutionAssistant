name: CI/CD

on:
  push:
    branches: [main]
    paths:
      - '**'
  pull_request:
    branches: [main]
    paths:
      - '**'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      go_backend: ${{ steps.filter.outputs.go_backend }}
      log_analyzer: ${{ steps.filter.outputs.log_analyzer }}
      action_recommender: ${{ steps.filter.outputs.action_recommender }}
      knowledge_base: ${{ steps.filter.outputs.knowledge_base }}
      root_cause_predictor: ${{ steps.filter.outputs.root_cause_predictor }}
      incident_integrator: ${{ steps.filter.outputs.incident_integrator }}
      k8s_log_scanner: ${{ steps.filter.outputs.k8s_log_scanner }}
    steps:
      - uses: actions/checkout@v3
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            go_backend:
              - 'backend/go-backend/**'
              - '.github/workflows/ci.yml'
            log_analyzer:
              - 'backend/python-services/log_analyzer/**'
              - 'backend/python-services/common/**'
              - '.github/workflows/ci.yml'
            action_recommender:
              - 'backend/python-services/action_recommender/**'
              - 'backend/python-services/common/**'
              - '.github/workflows/ci.yml'
            knowledge_base:
              - 'backend/python-services/knowledge_base/**'
              - 'backend/python-services/common/**'
              - '.github/workflows/ci.yml'
            root_cause_predictor:
              - 'backend/python-services/root_cause_predictor/**'
              - 'backend/python-services/common/**'
              - '.github/workflows/ci.yml'
            incident_integrator:
              - 'backend/python-services/incident_integrator/**'
              - 'backend/python-services/common/**'
              - '.github/workflows/ci.yml'
            k8s_log_scanner:
              - 'backend/python-services/k8s_log_scanner/**'
              - 'backend/python-services/common/**'
              - '.github/workflows/ci.yml'

  go-backend:
    name: Go Backend CI
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.go_backend == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Clean Go build cache
        run: |
          cd backend/go-backend
          go clean -cache -modcache -testcache -x

      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: backend/go-backend
          args: --timeout=5m

      - name: Test
        run: |
          cd backend/go-backend
          go test ./...

      - name: Build Docker image
        run: |
          cd backend/go-backend
          docker build -t ghcr.io/shmulik27/go-backend:${{ github.sha }} .

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} 

      - name: Push Docker image
        run: |
          docker push ghcr.io/shmulik27/go-backend:${{ github.sha }}

  log-analyzer:
    name: Log Analyzer CI
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.log_analyzer == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install ruff and pytest
        run: |
          pip install ruff pytest
      - name: Install dependencies
        run: |
          if [ -f backend/python-services/log_analyzer/requirements.txt ]; then
            python -m pip install -r backend/python-services/log_analyzer/requirements.txt
          fi
      - name: Install spaCy English model
        run: |
          python -m spacy download en_core_web_sm
      - name: Lint
        run: |
          cd backend/python-services/log_analyzer
          ruff check .
      - name: Type check with mypy
        run: |
          pip install mypy
          cd backend/python-services/log_analyzer
          mypy --explicit-package-bases app tests
      - name: Test
        run: |
          cd backend/python-services/log_analyzer
          PYTHONPATH=../ pytest
      - name: Build Docker image
        run: |
          cd backend/python-services/log_analyzer
          docker build -t ghcr.io/shmulik27/log_analyzer:${{ github.sha }} .
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Docker image
        run: |
          docker push ghcr.io/shmulik27/log_analyzer:${{ github.sha }}

  action-recommender:
    name: Action Recommender CI
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.action_recommender == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install ruff and pytest
        run: |
          pip install ruff pytest
      - name: Install dependencies
        run: |
          if [ -f backend/python-services/action_recommender/requirements.txt ]; then
            python -m pip install -r backend/python-services/action_recommender/requirements.txt
          fi
      - name: Lint
        run: |
          cd backend/python-services/action_recommender
          ruff check .
      - name: Type check with mypy
        run: |
          pip install mypy
          cd backend/python-services/action_recommender
          mypy --explicit-package-bases app tests
      - name: Test
        run: |
          cd backend/python-services/action_recommender
          PYTHONPATH=../ pytest
      - name: Build Docker image
        run: |
          cd backend/python-services/action_recommender
          docker build -t ghcr.io/shmulik27/action_recommender:${{ github.sha }} .
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Docker image
        run: |
          docker push ghcr.io/shmulik27/action_recommender:${{ github.sha }}

  knowledge-base:
    name: Knowledge Base CI
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.knowledge_base == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install ruff and pytest
        run: |
          pip install ruff pytest
      - name: Install dependencies
        run: |
          if [ -f backend/python-services/knowledge_base/requirements.txt ]; then
            python -m pip install -r backend/python-services/knowledge_base/requirements.txt
          fi
      - name: Lint
        run: |
          cd backend/python-services/knowledge_base
          ruff check .
      - name: Type check with mypy
        run: |
          pip install mypy
          cd backend/python-services/knowledge_base
          mypy --explicit-package-bases app tests
      - name: Test
        run: |
          cd backend/python-services/knowledge_base
          PYTHONPATH=../ pytest
      - name: Build Docker image
        run: |
          cd backend/python-services/knowledge_base
          docker build -t ghcr.io/shmulik27/knowledge_base:${{ github.sha }} .
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Docker image
        run: |
          docker push ghcr.io/shmulik27/knowledge_base:${{ github.sha }}

  root-cause-predictor:
    name: Root Cause Predictor CI
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.root_cause_predictor == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install ruff and pytest
        run: |
          pip install ruff pytest
      - name: Install dependencies
        run: |
          if [ -f backend/python-services/root_cause_predictor/requirements.txt ]; then
            python -m pip install -r backend/python-services/root_cause_predictor/requirements.txt
          fi
      - name: Lint
        run: |
          cd backend/python-services/root_cause_predictor
          ruff check .
      - name: Type check with mypy
        run: |
          pip install mypy
          cd backend/python-services/root_cause_predictor
          mypy --explicit-package-bases app tests
      - name: Test
        run: |
          cd backend/python-services/root_cause_predictor
          PYTHONPATH=../ pytest
      - name: Build Docker image
        run: |
          cd backend/python-services/root_cause_predictor
          docker build -t ghcr.io/shmulik27/root_cause_predictor:${{ github.sha }} .
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Docker image
        run: |
          docker push ghcr.io/shmulik27/root_cause_predictor:${{ github.sha }}

  incident-integrator:
    name: Incident Integrator CI
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.incident_integrator == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install ruff and pytest
        run: |
          pip install ruff pytest
      - name: Install dependencies
        run: |
          if [ -f backend/python-services/incident_integrator/requirements.txt ]; then
            python -m pip install -r backend/python-services/incident_integrator/requirements.txt
          fi
      - name: Lint
        run: |
          cd backend/python-services/incident_integrator
          ruff check .
      - name: Type check with mypy
        run: |
          pip install mypy types-requests
          cd backend/python-services/incident_integrator
          mypy --explicit-package-bases app tests
      - name: Test
        run: |
          cd backend/python-services/incident_integrator
          PYTHONPATH=../ pytest
      - name: Build Docker image
        run: |
          cd backend/python-services/incident_integrator
          docker build -t ghcr.io/shmulik27/incident_integrator:${{ github.sha }} .
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Docker image
        run: |
          docker push ghcr.io/shmulik27/incident_integrator:${{ github.sha }}

  k8s-log-scanner:
    name: K8s Log Scanner CI
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.k8s_log_scanner == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install ruff and pytest
        run: |
          pip install ruff pytest
      - name: Install dependencies
        run: |
          if [ -f backend/python-services/k8s_log_scanner/requirements.txt ]; then
            python -m pip install -r backend/python-services/k8s_log_scanner/requirements.txt
          fi
      - name: Lint
        run: |
          cd backend/python-services/k8s_log_scanner
          ruff check .
      - name: Type check with mypy
        run: |
          pip install mypy types-requests
          cd backend/python-services/k8s_log_scanner
          mypy --explicit-package-bases app tests
      - name: Test
        run: |
          cd backend/python-services/k8s_log_scanner
          PYTHONPATH=../ pytest
      - name: Build Docker image
        run: |
          cd backend/python-services/k8s_log_scanner
          docker build -t ghcr.io/shmulik27/k8s_log_scanner:${{ github.sha }} .
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Docker image
        run: |
          docker push ghcr.io/shmulik27/k8s_log_scanner:${{ github.sha }} 